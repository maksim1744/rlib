var searchIndex = JSON.parse('{\
"rlib_bitset":{"doc":"","t":"CAADLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bitset","bits_iter","bitset","BitsIter","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","Bitset","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clear","clone","clone_into","count","default","eq","equivalent","flip","fmt","fmt","from","from_u64","into","iter_bits","new","not","remove","set","test","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"rlib_bitset"],[3,"rlib_bitset::bits_iter"],[14,"rlib_bitset::bitset"],[47,"core::option"],[48,"core::result"],[49,"core::any"],[50,"core::fmt"],[51,"core::fmt"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,3,3,3,3,3,3,3,3,3,3,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[1]]],3],[3,4],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,[[7,7]],[[7,7],8],[[7,7]],[[7,7],8],[[7,7]],[[7,7],8],[-1,-2,[],[]],[-1,-2,[],[]],[7,8],[7,7],[[-1,-2],8,[],[]],[7,9],[[],7],[[7,7],10],[[-1,-2],10,[],[]],[[7,9],8],[[7,11],12],[[7,11],12],[-1,-1,[]],[1,7],[-1,-2,[],[]],[7,3],[[],7],[7],[[7,9],8],[[7,9],8],[[7,9],10],[-1,-2,[],[]],[-1,13,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]]],"c":[],"p":[[15,"u64"],[15,"array"],[3,"BitsIter",3],[4,"Option",47],[4,"Result",48],[3,"TypeId",49],[3,"Bitset",14],[15,"tuple"],[15,"usize"],[15,"bool"],[3,"Formatter",50],[6,"Result",50],[3,"String",51]]},\
"rlib_dsu":{"doc":"","t":"DLLLLLLLLLLLLLLLLL","n":["DSU","borrow","borrow_mut","check","clone","clone_into","fmt","from","into","new","par","reset","size","to_owned","try_from","try_into","type_id","un"],"q":[[0,"rlib_dsu"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::any"]],"d":["","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,2,2],3],[1,1],[[-1,-2],4,[],[]],[[1,5],6],[-1,-1,[]],[-1,-2,[],[]],[2,1],[[1,2],2],[[1,2],4],[[1,2],2],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[[1,2,2],3]],"c":[],"p":[[3,"DSU",0],[15,"usize"],[15,"bool"],[15,"tuple"],[3,"Formatter",18],[6,"Result",18],[4,"Result",19],[3,"TypeId",20]]},\
"rlib_f80":{"doc":"","t":"SSLLLLLLLLLLLLDFLLLLLLLLLLLLLLLLLLLLLL","n":["ONE","ZERO","abs","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","equivalent","f80","f80_init","fmt","fmt","from","from","ge","gt","into","le","lt","max","min","mul","mul_assign","neg","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"rlib_f80"],[38,"core::fmt"],[39,"core::fmt"],[40,"core::option"],[41,"alloc::string"],[42,"core::result"],[43,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[1,1],[[1,1]],[[1,1],2],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[],1],[[1,1]],[[1,1],2],[[1,1],3],[[-1,-2],3,[],[]],0,[[],2],[[1,4],5],[[1,4],5],[-1,-1,[]],[6,1],[[1,1],3],[[1,1],3],[-1,-2,[],[]],[[1,1],3],[[1,1],3],[[1,1],1],[[1,1],1],[[1,1]],[[1,1],2],[1],[[1,1],[[8,[7]]]],[[1,1]],[[1,1],2],[-1,-2,[],[]],[-1,9,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]]],"c":[],"p":[[3,"f80",0],[15,"tuple"],[15,"bool"],[3,"Formatter",38],[6,"Result",38],[15,"f64"],[4,"Ordering",39],[4,"Option",40],[3,"String",41],[4,"Result",42],[3,"TypeId",43]]},\
"rlib_gcd":{"doc":"","t":"FFFF","n":["crt","egcd","gcd","lcm"],"q":[[0,"rlib_gcd"],[4,"rlib_integer"],[5,"core::ops::arith"]],"d":["","","",""],"i":[0,0,0,0],"f":[[[-1,-1,-1,-1],-1,[1,2]],[[-1,-1,-1],[[3,[-1,-1]]],1],[[-1,-1],-1,1],[[-1,-1],-1,1]],"c":[],"p":[[8,"Integer",4],[8,"Neg",5],[15,"tuple"]]},\
"rlib_integer":{"doc":"","t":"SISSSQSQSKK","n":["BASE_10_LEN","Integer","MAX","MIN","ONE","Signed","TWO","Unsigned","ZERO","abs","unsigned_abs"],"q":[[0,"rlib_integer"]],"d":["","","","","","","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,[],[]]],"c":[],"p":[[8,"Integer",0]]},\
"rlib_io":{"doc":"","t":"CCCCOCOOAAAOIDLLLLLLKLLLLLLLIDLLLLLLLLLLKLL","n":["Readable","Reader","Writable","Writer","make_io","make_output_macro","make_output_macro_","out_impl","output_macro","reader","writer","make_output_macro","Readable","Reader","borrow","borrow_mut","from","into","is_eof","new","read","read","read_line","read_lines","read_vec","try_from","try_into","type_id","Writable","Writer","borrow","borrow_mut","drop","flush","from","into","new","try_from","try_into","type_id","write","write","write_char"],"q":[[0,"rlib_io"],[11,"rlib_io::output_macro"],[12,"rlib_io::reader"],[28,"rlib_io::writer"],[43,"std::io"],[44,"alloc::boxed"],[45,"alloc::string"],[46,"core::option"],[47,"alloc::vec"],[48,"core::result"],[49,"core::any"],[50,"std::io"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,0,0,12,12,12,12,12,12,12,12,12,12,15,12,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[1,2],[[[4,[3]]],1],[1,-1,[]],[1,-1,5],[1,[[7,[6]]]],[1,[[8,[6]]]],[[1,9],[[8,[-1]]],5],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[12,13],[12,13],[-1,-1,[]],[-1,-2,[],[]],[[[4,[14]]],12],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[-1,12],13,[]],[[12,-1],13,15],[[12,16],13]],"c":[],"p":[[3,"Reader",12],[15,"bool"],[8,"Read",43],[3,"Box",44],[8,"Readable",12],[3,"String",45],[4,"Option",46],[3,"Vec",47],[15,"usize"],[4,"Result",48],[3,"TypeId",49],[3,"Writer",28],[15,"tuple"],[8,"Write",43],[8,"Writable",28],[15,"char"]]},\
"rlib_iter":{"doc":"","t":"FFFF","n":["iter_neighbours_4","iter_neighbours_8","iter_submasks","iter_supermasks"],"q":[[0,"rlib_iter"],[4,"core::iter::traits::iterator"]],"d":["","","",""],"i":[0,0,0,0],"f":[[[1,1,1,1],[[0,[2]]]],[[1,1,1,1],[[0,[2]]]],[-1,[[0,[2]]],0],[-1,[[0,[2]]],0]],"c":[],"p":[[15,"usize"],[8,"Iterator",4]]},\
"rlib_mint":{"doc":"","t":"GGDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Mint107","Mint998","Modular","ONE","ZERO","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","equivalent","fmt","fmt","from","inner","into","inv","md","mul","mul_assign","neg","new","pow","read","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","write"],"q":[[0,"rlib_mint"],[36,"core::fmt"],[37,"core::fmt"],[38,"alloc::string"],[39,"core::result"],[40,"core::any"],[41,"rlib_io::writer"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[[1,1],1],[[1,1],2],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],1],[[1,1],2],[[1,1],3],[[-1,-2],3,[],[]],[[1,4],5],[[1,4],5],[-1,-1,[]],[1,6],[-1,-2,[],[]],[1,1],[[],6],[[1,1],1],[[1,1],2],[1,1],[7,1],[[1,8],1],[9,1],[[1,1],1],[[1,1],2],[-1,-2,[],[]],[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[[1,13],2]],"c":[],"p":[[3,"Modular",0],[15,"tuple"],[15,"bool"],[3,"Formatter",36],[6,"Result",36],[15,"u32"],[15,"i64"],[15,"u64"],[3,"Reader",37],[3,"String",38],[4,"Result",39],[3,"TypeId",40],[3,"Writer",41]]},\
"rlib_rand":{"doc":"","t":"IGAKALLDLLLLLLLLLLLLLLIK","n":["Rand","Rng","lcg","next","randomable","shuffle","shuffle","LinearCongruentialGenerator64","borrow","borrow_mut","clone","clone_into","from","from_seed","from_time","into","next","next_raw","to_owned","try_from","try_into","type_id","Randomable","gen_from_u64"],"q":[[0,"rlib_rand"],[7,"rlib_rand::lcg"],[22,"rlib_rand::randomable"],[24,"core::result"],[25,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,8,0,8,8,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,1],"f":[0,0,0,[[-1,-3],-2,[],[],[[1,[-2]]]],0,[[-1,[2,[-2]]],3,[],[]],[[-1,[2,[-2]]],3,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[[-1,-2],3,[],[]],[-1,-1,[]],[5,4],[[],4],[-1,-2,[],[]],[[4,-2],-1,[],[[1,[-1]]]],[4,5],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,[[-1,5],-2,[],[]]],"c":[],"p":[[8,"Randomable",22],[15,"slice"],[15,"tuple"],[3,"LinearCongruentialGenerator64",7],[15,"u64"],[4,"Result",24],[3,"TypeId",25],[8,"Rand",0]]},\
"rlib_rational":{"doc":"","t":"SDISMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ONE","Rational","SignedInteger","ZERO","a","add","add_assign","b","borrow","borrow_mut","ceil","clone","clone_into","cmp","div","div_assign","eq","equivalent","floor","fmt","fmt","from","hash","into","mul","mul_assign","new","new_int","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"rlib_rational"],[36,"core::clone"],[37,"core::cmp"],[38,"core::cmp"],[39,"core::fmt"],[40,"core::hash"],[41,"alloc::string"],[42,"core::result"],[43,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],3,2],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],4],[[-1,-2],3,[],[]],[[[1,[-1]],[1,[-1]]],5,2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],3,2],[[[1,[-1]],[1,[-1]]],6,7],[[-1,-2],6,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],8],9,[2,10]],[[[1,[-1]],8],9,[2,11]],[-1,-1,[]],[[[1,[-1]],-2],3,12,13],[-1,-2,[],[]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],3,2],[[-1,-1],[[1,[-1]]],2],[-1,[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[14,[5]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],3,2],[-1,-2,[],[]],[-1,15,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]]],"c":[],"p":[[3,"Rational",0],[8,"SignedInteger",0],[15,"tuple"],[8,"Clone",36],[4,"Ordering",37],[15,"bool"],[8,"PartialEq",37],[3,"Formatter",38],[6,"Result",38],[8,"Display",38],[8,"Debug",38],[8,"Hash",39],[8,"Hasher",39],[4,"Option",40],[3,"String",41],[4,"Result",42],[3,"TypeId",43]]},\
"rlib_segtree":{"doc":"","t":"CCCAADIILLLLLLLKKLLLKLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMM","n":["Segtree","SegtreeItem","SegtreeItemLazy","segtree","segtree_items","Segtree","SegtreeItem","SegtreeItemLazy","ask","borrow","borrow_mut","from","from_iter","from_slice","into","merge","modify","modify","new","new_raw","push","set","try_from","try_into","type_id","update","Max","Min","Sum","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","fmt","fmt","fmt","from","from","from","into","into","into","merge","merge","merge","modify","modify","modify","new","new","new","push","push","push","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v","v","v"],"q":[[0,"rlib_segtree"],[5,"rlib_segtree::segtree"],[26,"rlib_segtree::segtree_items"],[80,"core::clone"],[81,"core::iter::traits::iterator"],[82,"core::iter::traits::exact_size"],[83,"core::default"],[84,"core::result"],[85,"core::any"],[86,"core::cmp"],[87,"rlib_integer"],[88,"core::fmt"],[89,"core::fmt"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,21,4,1,1,1,4,1,1,1,1,21,0,0,0,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15,12,14,15],"f":[0,0,0,0,0,0,0,0,[[[1,[-2,-1]],2,2],-2,[],[3,[4,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,[[1,[-3,-2]]],[5,6],[],[7,3,[4,[-2]]]],[[[8,[-2]]],[[1,[-2,-1]]],[],[3,[4,[-1]]]],[-1,-2,[],[]],[[-1,-1],-1,[]],[[-1,-2],9,[],[]],[[[1,[-2,-1]],2,2,-1],9,[],[3,[4,[-1]]]],[[2,-2],[[1,[-2,-1]]],[],[3,[4,[-1]]]],[[2,-2],[[1,[-2,-1]]],[],[3,[4,[-1]]]],[[-1,-1,-1],9,[]],[[[1,[-2,-1]],2,-2],9,[],[3,[4,[-1]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[[-1,-1,-1],9,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[-1]]],[3,13,3]],[[[14,[-1]]],[[14,[-1]]],[3,13,3]],[[[15,[-1]]],[[15,[-1]]],[3,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[],[[12,[-1]]],[13,3,16]],[[],[[14,[-1]]],[13,3,16]],[[],[[15,[-1]]],[13,3,16]],[[[12,[-1]],17],18,[19,13,3]],[[[14,[-1]],17],18,[19,13,3]],[[[15,[-1]],17],18,[19,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]],[12,[-1]]],[[12,[-1]]],[13,3]],[[[14,[-1]],[14,[-1]]],[[14,[-1]]],[13,3]],[[[15,[-1]],[15,[-1]]],[[15,[-1]]],[20,3]],[[-1,9],9,[]],[[-1,9],9,[]],[[-1,9],9,[]],[-1,[[12,[-1]]],[13,3]],[-1,[[14,[-1]]],[13,3]],[-1,[[15,[-1]]],[13,3]],[[-1,-2,-2],9,[],[]],[[-1,-2,-2],9,[],[]],[[-1,-2,-2],9,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0],"c":[],"p":[[3,"Segtree",5],[15,"usize"],[8,"Clone",80],[8,"SegtreeItemLazy",5],[8,"Iterator",81],[8,"ExactSizeIterator",82],[8,"Default",83],[15,"slice"],[15,"tuple"],[4,"Result",84],[3,"TypeId",85],[3,"Min",26],[8,"PartialOrd",86],[3,"Max",26],[3,"Sum",26],[8,"Integer",87],[3,"Formatter",88],[6,"Result",88],[8,"Debug",88],[8,"Add",89],[8,"SegtreeItem",5]]},\
"rlib_sieve":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLL","n":["PrimeIter","Sieve","borrow","borrow","borrow_mut","borrow_mut","factorize","from","from","into","into","into_iter","is_prime","min_prime","new","next","primes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rlib_sieve"],[23,"core::option"],[24,"alloc::vec"],[25,"core::result"],[26,"core::any"]],"d":["","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,3,1,3,1,1,3,1,3,1,3,1,1,1,3,1,3,1,3,1,3,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],4],[[1,2],2],[5,1],[3,6],[1,[[7,[2]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]]],"c":[],"p":[[3,"Sieve",0],[15,"i32"],[3,"PrimeIter",0],[15,"bool"],[15,"usize"],[4,"Option",23],[3,"Vec",24],[4,"Result",25],[3,"TypeId",26]]},\
"rlib_tensor":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Tensor","borrow","borrow_mut","clone","clone_into","dim","dims","eq","fmt","from","from_slice","from_vec","get_index","index","index_mut","into","into_iter","iter","iter_mut","new","read","to_owned","try_from","try_into","type_id","write"],"q":[[0,"rlib_tensor"],[26,"core::clone"],[27,"core::cmp"],[28,"core::fmt"],[29,"core::fmt"],[30,"core::slice::iter"],[31,"core::slice::iter"],[32,"rlib_io::reader"],[33,"core::any"],[34,"rlib_io::writer"],[35,"rlib_io::writer"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[-1,-2],3,[],[]],[[[1,[-1]],4],4,[]],[[[1,[-1]]],[[5,[4]]],[]],[[[1,[-1]],[1,[-1]]],6,7],[[[1,[-1]],8],9,10],[-1,-1,[]],[[[5,[4]],[11,[-1]]],[[1,[-1]]],2],[[[5,[4]],[12,[-1]]],[[1,[-1]]],[]],[[[1,[-1]],[5,[4]]],4,[]],[[[1,[-1]],[5,[4]]],[],[]],[[[1,[-1]],[5,[4]]],[],[]],[-1,-2,[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[[13,[-1]]],[]],[[[1,[-1]]],[[14,[-1]]],[]],[[[5,[4]],-1],[[1,[-1]]],2],[[[5,[4]],15],[[1,[-1]]],16],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[[[1,[-1]],19],3,20]],"c":[],"p":[[3,"Tensor",0],[8,"Clone",26],[15,"tuple"],[15,"usize"],[15,"array"],[15,"bool"],[8,"PartialEq",27],[3,"Formatter",28],[6,"Result",28],[8,"Debug",28],[15,"slice"],[3,"Vec",29],[3,"Iter",30],[3,"IterMut",30],[3,"Reader",31],[8,"Readable",31],[4,"Result",32],[3,"TypeId",33],[3,"Writer",34],[8,"Writable",34]]},\
"rlib_treap":{"doc":"","t":"DIIDDLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLMLLLLMLMLKLLLLLLLLLLLLLLLLL","n":["Treap","TreapItem","TreapItemSized","TreapNode","TreePrinter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect","collect_into","default","first","fmt","fmt","fmt","from","from","from","from_item","insert_at","into","into","into","is_empty","item","last","left","merge","merge","new","new","new","priority","push","push","push","remove_at","right","root","root","root_mut","size","size","split_at","split_at","split_by","split_by","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update"],"q":[[0,"rlib_treap"],[62,"alloc::vec"],[63,"core::default"],[64,"core::option"],[65,"core::fmt"],[66,"core::fmt"],[67,"core::ops::function"],[68,"core::result"],[69,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,8,4,1,8,4,1,1,4,1,1,8,4,1,8,4,1,1,1,8,4,1,1,4,1,4,4,1,8,4,1,4,3,3,4,1,4,1,1,1,13,1,4,1,4,1,8,4,1,8,4,1,8,4,1,3,3,4],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[2,[-1]]],5,3],[[],[[1,[-1]]],6],[[[1,[-1]]],[[7,[-1]]],3],[[[8,[-1]],9],10,[3,11]],[[[4,[-1]],9],10,[3,11]],[[[1,[-1]],9],10,[3,11]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],3],[[[1,[-1]],12,-1],5,[3,13]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],14,3],0,[[[1,[-1]]],[[7,[-1]]],3],0,[[[7,[[15,[[4,[-1]]]]]],[7,[[15,[[4,[-1]]]]]]],[[7,[[15,[[4,[-1]]]]]]],3],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],3],[[[1,[-1]]],[[8,[-1]]],[3,11]],[-1,[[4,[-1]]],[]],[[],[[1,[-1]]],3],0,[[-1,[7,[-1]],[7,[-1]]],5,[]],[[-1,[7,[-1]],[7,[-1]]],5,[]],[[[4,[-1]]],5,3],[[[1,[-1]],12],-1,[3,13]],0,[[[1,[-1]]],[[7,[-1]]],3],0,[[[1,[-1]]],[[7,[-1]]],3],[-1,12,[]],[[[1,[-1]]],12,[3,13]],[[[7,[[15,[[4,[-1]]]]]],12],[[5,[[7,[[15,[[4,[-1]]]]]],[7,[[15,[[4,[-1]]]]]]]]],[3,13]],[[[1,[-1]],12],[[5,[[1,[-1]],[1,[-1]]]]],[3,13]],[[[7,[[15,[[4,[-1]]]]]],-2],[[5,[[7,[[15,[[4,[-1]]]]]],[7,[[15,[[4,[-1]]]]]]]]],3,16],[[[1,[-1]],-2],[[5,[[1,[-1]],[1,[-1]]]]],3,16],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[-1,[7,[-1]],[7,[-1]]],5,[]],[[-1,[7,[-1]],[7,[-1]]],5,[]],[[[4,[-1]]],5,3]],"c":[],"p":[[3,"Treap",0],[3,"Vec",62],[8,"TreapItem",0],[3,"TreapNode",0],[15,"tuple"],[8,"Default",63],[4,"Option",64],[3,"TreePrinter",0],[3,"Formatter",65],[6,"Result",65],[8,"Debug",65],[15,"usize"],[8,"TreapItemSized",0],[15,"bool"],[3,"Box",66],[8,"FnMut",67],[4,"Result",68],[3,"TypeId",69]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
