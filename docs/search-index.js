var searchIndex = new Map(JSON.parse('[\
["rlib_bitset",{"doc":"","t":"ECCFNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Bitset","bits_iter","bitset","BitsIter","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","Bitset","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clear","clone","clone_into","count","default","eq","flip","fmt","fmt","from","from_u64","into","iter_bits","new","not","remove","set","test","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"rlib_bitset"],[3,"rlib_bitset::bits_iter"],[14,"rlib_bitset::bitset"],[46,"core::option"],[47,"core::result"],[48,"core::any"],[49,"core::fmt"],[50,"core::fmt"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,3,3,3,3,3,3,3,3,3,3,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":"````{ce{}{}}0{cc{}}11{{{d{b}}}f}{f{{h{c}}}{}}{c{{j{e}}}{}{}}0{cl{}}`{{nn}c{}}{{nn}A`}101077{nA`}{nn}{{ce}A`{}{}}{nAb}{{}n}{{nn}Ad}{{nAb}A`}{{nAf}Ah}0>{bn}{ce{}{}}{nf}6{nc{}}55{{nAb}Ad}3{cAj{}}{c{{j{e}}}{}{}}0{cl{}}","c":[],"p":[[1,"u64"],[1,"array"],[5,"BitsIter",3],[6,"Option",46],[6,"Result",47],[5,"TypeId",48],[5,"Bitset",14],[1,"unit"],[1,"usize"],[1,"bool"],[5,"Formatter",49],[8,"Result",49],[5,"String",50]],"b":[[30,"impl-Display-for-Bitset%3CN%3E"],[31,"impl-Debug-for-Bitset%3CN%3E"]]}],\
["rlib_dsu",{"doc":"","t":"FNNNNNNNNNNNNNNNNN","n":["DSU","borrow","borrow_mut","check","clone","clone_into","fmt","from","into","new","par","reset","size","to_owned","try_from","try_into","type_id","un"],"q":[[0,"rlib_dsu"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::any"]],"d":["","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{{bdd}f}{bb}{{ce}h{}{}}{{bj}l}{cc{}}5{db}{{bd}d}{{bd}h}18{c{{n{e}}}{}{}}0{cA`{}}9","c":[],"p":[[5,"DSU",0],[1,"usize"],[1,"bool"],[1,"unit"],[5,"Formatter",18],[8,"Result",18],[6,"Result",19],[5,"TypeId",20]],"b":[]}],\
["rlib_f80",{"doc":"","t":"TTNNNNNNNNNNNFHNNNNNNNNNNNNNNNNNNNNNN","n":["ONE","ZERO","abs","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","f80","f80_init","fmt","fmt","from","from","ge","gt","into","le","lt","max","min","mul","mul_assign","neg","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"rlib_f80"],[37,"core::fmt"],[38,"core::fmt"],[39,"core::option"],[40,"alloc::string"],[41,"core::result"],[42,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"``{bb}{{bb}c{}}{{bb}d}{ce{}{}}03{{ce}d{}{}}{{}b}43{{bb}f}`{{}d}{{bh}j}0{lb}{cc{}}44744{{bb}b}0:9{bc{}}{{bb}{{A`{n}}}}<;:{cAb{}}{c{{Ad{e}}}{}{}}0{cAf{}}","c":[],"p":[[5,"f80",0],[1,"unit"],[1,"bool"],[5,"Formatter",37],[8,"Result",37],[1,"f64"],[6,"Ordering",38],[6,"Option",39],[5,"String",40],[6,"Result",41],[5,"TypeId",42]],"b":[[15,"impl-Display-for-f80"],[16,"impl-Debug-for-f80"]]}],\
["rlib_gcd",{"doc":"","t":"HHHH","n":["crt","egcd","gcd","lcm"],"q":[[0,"rlib_gcd"],[4,"rlib_integer"]],"d":["","","",""],"i":[0,0,0,0],"f":"{{cccc}c{}}{{ccc}{{b{cc}}}d}{{cc}cd}0","c":[],"p":[[1,"tuple"],[10,"Integer",4]],"b":[]}],\
["rlib_integer",{"doc":"","t":"TKTTTRTRTMM","n":["BASE_10_LEN","Integer","MAX","MIN","ONE","Signed","TWO","Unsigned","ZERO","abs","unsigned_abs"],"q":[[0,"rlib_integer"]],"d":["","","","","","","","","","",""],"i":[3,0,3,3,3,3,3,3,3,3,3],"f":"`````````{{{f{}{{b{c}}{d{e}}}}}{{f{}{{b{c}}{d{e}}}}}ff}{{{f{}{{b{c}}{d{e}}}}}cff}","c":[],"p":[[17,"Unsigned"],[17,"Signed"],[10,"Integer",0]],"b":[]}],\
["rlib_io",{"doc":"","t":"EEEEQEQQCCCQKFNNNNNNMNNNNNNNKFNNNNNNNNNNMNN","n":["Readable","Reader","Writable","Writer","make_io","make_output_macro","make_output_macro_","out_impl","output_macro","reader","writer","make_output_macro","Readable","Reader","borrow","borrow_mut","from","into","is_eof","new","read","read","read_line","read_lines","read_vec","try_from","try_into","type_id","Writable","Writer","borrow","borrow_mut","drop","flush","from","into","new","try_from","try_into","type_id","write","write","write_char"],"q":[[0,"rlib_io"],[11,"rlib_io::output_macro"],[12,"rlib_io::reader"],[28,"rlib_io::writer"],[43,"std::io"],[44,"alloc::boxed"],[45,"alloc::string"],[46,"core::option"],[47,"alloc::vec"],[48,"core::result"],[49,"core::any"],[50,"std::io"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,0,0,12,12,12,12,12,12,12,12,12,12,15,12,12],"f":"``````````````{ce{}{}}0{cc{}}1{bd}{{{h{f}}}b}{bj}{bcj}{b{{n{l}}}}{b{{A`{l}}}}{{bAb}{{A`{c}}}j}{c{{Ad{e}}}{}{}}0{cAf{}}``::{AhAj}0:;{{{h{Al}}}Ah}332{{AnAh}Aj}{{Ahc}AjAn}{{AhB`}Aj}","c":[],"p":[[5,"Reader",12],[1,"bool"],[10,"Read",43],[5,"Box",44],[10,"Readable",12],[5,"String",45],[6,"Option",46],[5,"Vec",47],[1,"usize"],[6,"Result",48],[5,"TypeId",49],[5,"Writer",28],[1,"unit"],[10,"Write",43],[10,"Writable",28],[1,"char"]],"b":[]}],\
["rlib_iter",{"doc":"","t":"HHHH","n":["iter_neighbours_4","iter_neighbours_8","iter_submasks","iter_supermasks"],"q":[[0,"rlib_iter"],[4,"core::iter::traits::iterator"]],"d":["","","",""],"i":[0,0,0,0],"f":"{{bbbb}{{`{{h{}{{d{{f{bb}}}}}}}}}}0{c{{`{{h{}{{d{c}}}}}}}`}0","c":[],"p":[[1,"usize"],[17,"Item"],[1,"tuple"],[10,"Iterator",4]],"b":[]}],\
["rlib_mint",{"doc":"","t":"IIFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Mint107","Mint998","Modular","ONE","ZERO","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","fmt","from","inner","into","inv","md","mul","mul_assign","neg","new","pow","read","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","write"],"q":[[0,"rlib_mint"],[35,"core::fmt"],[36,"core::fmt"],[37,"alloc::string"],[38,"core::result"],[39,"core::any"],[40,"rlib_io::writer"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`````{{bb}b}{{bb}d}{ce{}{}}0{bb}{{ce}d{}{}}43{{bb}f}{{bh}j}0{cc{}}{bl}65{{}l}986{nb}{{bA`}b}{Abb}<;:{cAd{}}{c{{Af{e}}}{}{}}0{cAh{}}{{bAj}d}","c":[],"p":[[5,"Modular",0],[1,"unit"],[1,"bool"],[5,"Formatter",35],[8,"Result",35],[1,"u32"],[1,"i64"],[1,"u64"],[5,"Reader",36],[5,"String",37],[6,"Result",38],[5,"TypeId",39],[5,"Writer",40]],"b":[[14,"impl-Display-for-Modular%3CM%3E"],[15,"impl-Debug-for-Modular%3CM%3E"]]}],\
["rlib_rand",{"doc":"","t":"KICMCNNFNNNNNNNNNNNNNNKM","n":["Rand","Rng","lcg","next","randomable","shuffle","shuffle","LinearCongruentialGenerator64","borrow","borrow_mut","clone","clone_into","from","from_seed","from_time","into","next","next_raw","to_owned","try_from","try_into","type_id","Randomable","gen_from_u64"],"q":[[0,"rlib_rand"],[7,"rlib_rand::lcg"],[22,"rlib_rand::randomable"],[24,"core::result"],[25,"core::any"],[26,"core::marker"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,1,0,1,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,2],"f":"```{{be}c{}{{d{c}}}}`{{b{f{c}}}h{}}0`{ce{}{}}0{jj}{{ce}h{}{}}{cc{}}{lj}{{}j}5{{je}c{}{{d{c}}}}{jl}7{c{{n{e}}}{}{}}0{cA`{}}`{{dl}cAb}","c":[],"p":[[10,"Rand",0],[10,"Randomable",22],[1,"slice"],[1,"unit"],[5,"LinearCongruentialGenerator64",7],[1,"u64"],[6,"Result",24],[5,"TypeId",25],[10,"Sized",26]],"b":[]}],\
["rlib_rational",{"doc":"","t":"TFKTONNONNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ONE","Rational","SignedInteger","ZERO","a","add","add_assign","b","borrow","borrow_mut","ceil","clone","clone_into","cmp","div","div_assign","eq","floor","fmt","fmt","from","hash","into","mul","mul_assign","new","new_int","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"rlib_rational"],[35,"core::clone"],[36,"core::cmp"],[37,"core::cmp"],[38,"core::fmt"],[39,"core::hash"],[40,"alloc::string"],[41,"core::result"],[42,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`````{{{b{c}}{b{c}}}{{b{c}}}d}{{{b{c}}{b{c}}}fd}`{ce{}{}}0{{{b{c}}}{{b{c}}}d}{{{b{c}}}{{b{c}}}h}{{ce}f{}{}}{{{b{c}}{b{c}}}jd}65{{{b{c}}{b{c}}}ln}4{{{b{c}}A`}Ab{dAd}}{{{b{c}}A`}Ab{dAf}}{cc{}}{{{b{c}}e}fAhAj}9;:{{cc}{{b{c}}}d}{c{{b{c}}}d}{{{b{c}}{b{c}}}{{Al{j}}}d}>=<{cAn{}}{c{{B`{e}}}{}{}}0{cBb{}}","c":[],"p":[[5,"Rational",0],[10,"SignedInteger",0],[1,"unit"],[10,"Clone",35],[6,"Ordering",36],[1,"bool"],[10,"PartialEq",36],[5,"Formatter",37],[8,"Result",37],[10,"Debug",37],[10,"Display",37],[10,"Hash",38],[10,"Hasher",38],[6,"Option",39],[5,"String",40],[6,"Result",41],[5,"TypeId",42]],"b":[[18,"impl-Debug-for-Rational%3CT%3E"],[19,"impl-Display-for-Rational%3CT%3E"]]}],\
["rlib_segtree",{"doc":"Segment tree","t":"EECCFKNNNNNNNNMNNNNNNNNNNFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOO","n":["Segtree","SegtreeItem","segtree","segtree_items","Segtree","SegtreeItem","ask","borrow","borrow_mut","debug","from","from_iter","from_slice","into","merge","modify","modify","new","new_raw","push","set","try_from","try_into","type_id","update","Combinator","Max","MaxAdd","Min","MinAdd","Sum","SumAdd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","len","md","md","md","merge","merge","merge","merge","merge","merge","merge","modify","modify","modify","modify","new","new","new","new","new","new","push","push","push","push","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","v","v","v","v","v","v"],"q":[[0,"rlib_segtree"],[4,"rlib_segtree::segtree"],[25,"rlib_segtree::segtree_items"],[156,"core::clone"],[157,"alloc::string"],[158,"core::fmt"],[159,"core::default"],[160,"core::iter::traits::iterator"],[161,"core::iter::traits::exact_size"],[162,"core::result"],[163,"core::any"],[164,"core::cmp"],[165,"core::ops::arith"],[166,"core::ops::arith"],[167,"core::fmt"]],"d":["","","","Implementations of SegtreeItem for common operations.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Combinator for two items that implement SegtreeItem.","Query max on a segment","Query max on a segment, += on a segment","Query min on a segment","Query min on a segment, += on a segment","Query sum on a segment","Query sum on a segment, += on a segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,4,4,1,1,1,4,1,1,1,1,4,0,0,0,0,0,0,0,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,15,15,17,17,17,18,18,21,21,23,23,24,24,26,26,15,17,18,21,23,24,26,24,21,23,24,15,17,18,21,23,24,26,21,23,24,26,15,17,18,21,23,24,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24,26,15,17,18,21,23,24],"f":"``````{{{b{ec}}dd}e{}{f{h{c}}}}{ce{}{}}0{{{b{ec}}}jl{lf{h{c}}}}{cc{}}{g{{b{ec}}}{}{nf{h{c}}}{{Ab{}{{A`{e}}}}Ad}}{{{Af{e}}}{{b{ec}}}{}{f{h{c}}}}4{{hh}h}{{hc}Ah{}}{{{b{ec}}ddc}Ah{}{f{h{c}}}}{{de}{{b{ec}}}{}{f{h{c}}}}0{{hhh}Ah}{{{b{ec}}de}Ah{}{f{h{c}}}}{c{{Aj{e}}}{}{}}0{cAl{}}3```````<<<<<<<<<<<<<<{{{An{c}}}{{An{c}}}{fB`f}}{{{Bb{c}}}{{Bb{c}}}{fB`f}}{{{Bd{c}}}{{Bd{c}}}{f{Bh{}{{Bf{}}}}f}}{{{Bj{c}}}{{Bj{c}}}{fB`Blnf}}{{{Bn{c}}}{{Bn{c}}}{fB`Blnf}}{{{C`{c}}}{{C`{c}}}{f{Bh{}{{Bf{}}}}{Cb{}{{Bf{}}}}nf}}{{{Cd{ce}}}{{Cd{ce}}}ff}{{ce}Ah{}{}}000000{{}{{An{c}}}Cf}{{}{{Bb{c}}}Cf}{{}{{Bd{c}}}{{Bh{}{{Bf{}}}}fn}}{{}{{Bj{c}}}Cf}{{}{{Bn{c}}}Cf}{{}{{C`{c}}}{{Bh{}{{Bf{}}}}{Cb{}{{Bf{}}}}nf}}{{}{{Cd{ce}}}nn}{{{An{c}}Ch}Cj{lB`f}}{{{Bb{c}}Ch}Cj{lB`f}}{{{Bd{c}}Ch}Cj{l{Bh{}{{Bf{}}}}f}}{{{Bj{c}}Ch}Cj{lB`Blnf}}{{{Bn{c}}Ch}Cj{lB`Blnf}}{{{C`{c}}Ch}Cj{l{Bh{}{{Bf{}}}}{Cb{}{{Bf{}}}}nf}}{{{Cd{ce}}Ch}Cjll}{cc{}}{Clc{}}{c{{An{c}}}{B`f}}{c{{Bb{c}}}{B`f}}32{c{{Bd{c}}}{}}4{c{{Bj{c}}}{B`Blnf}}5{c{{Bn{c}}}{B`Blnf}}66{c{{C`{c}}}{}}7{c{{Cd{eg}}}Cf{{Cn{c}}}{{Cn{c}}}}{ce{}{}}000000````{{{An{c}}{An{c}}}{{An{c}}}{B`f}}{{{Bb{c}}{Bb{c}}}{{Bb{c}}}{B`f}}{{{Bd{c}}{Bd{c}}}{{Bd{c}}}{{Bh{}{{Bf{}}}}f}}{{{Bj{c}}{Bj{c}}}{{Bj{c}}}{B`Blnf}}{{{Bn{c}}{Bn{c}}}{{Bn{c}}}{B`Blnf}}{{{C`{c}}{C`{c}}}{{C`{c}}}{{Bh{}{{Bf{}}}}{Cb{}{{Bf{}}}}nf}}{{{Cd{eg}}{Cd{eg}}}{{Cd{eg}}}{}{{h{c}}}{{h{c}}}}{{{Bj{c}}c}Ah{B`Blnf}}{{{Bn{c}}c}Ah{B`Blnf}}{{{C`{c}}c}Ah{{Bh{}{{Bf{}}}}{Cb{}{{Bf{}}}}nf}}{{{Cd{eg}}c}Ah{}{{h{c}}}{{h{c}}}}{c{{An{c}}}{B`f}}{c{{Bb{c}}}{B`f}}{c{{Bd{c}}}{}}{c{{Bj{c}}}{B`Blnf}}{c{{Bn{c}}}{B`Blnf}}{c{{C`{c}}}{}}{{{Bj{c}}{Bj{c}}{Bj{c}}}Ah{B`Blnf}}{{{Bn{c}}{Bn{c}}{Bn{c}}}Ah{B`Blnf}}{{{C`{c}}{C`{c}}{C`{c}}}Ah{{Bh{}{{Bf{}}}}{Cb{}{{Bf{}}}}nf}}{{{Cd{eg}}{Cd{eg}}{Cd{eg}}}Ah{}{{h{c}}}{{h{c}}}}{ce{}{}}000000{c{{Aj{e}}}{}{}}0000000000000{cAl{}}000000``````","c":[],"p":[[5,"Segtree",4],[1,"usize"],[10,"Clone",156],[10,"SegtreeItem",4],[5,"String",157],[10,"Debug",158],[10,"Default",159],[17,"Item"],[10,"Iterator",160],[10,"ExactSizeIterator",161],[1,"slice"],[1,"unit"],[6,"Result",162],[5,"TypeId",163],[5,"Min",25],[10,"PartialOrd",164],[5,"Max",25],[5,"Sum",25],[17,"Output"],[10,"Add",165],[5,"MinAdd",25],[10,"AddAssign",165],[5,"MaxAdd",25],[5,"SumAdd",25],[10,"Mul",165],[5,"Combinator",25],[10,"Integer",166],[5,"Formatter",158],[8,"Result",158],[1,"never"],[10,"From",167]],"b":[]}],\
["rlib_sieve",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNN","n":["PrimeIter","Sieve","borrow","borrow","borrow_mut","borrow_mut","factorize","from","from","into","into","into_iter","is_prime","min_prime","new","next","primes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rlib_sieve"],[23,"core::option"],[24,"alloc::vec"],[25,"core::result"],[26,"core::any"]],"d":["","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,3,1,3,1,1,3,1,3,1,3,1,1,1,3,1,3,1,3,1,3,1],"f":"``{ce{}{}}000{{bd}f}{cc{}}0222{{bd}h}{{bd}d}{jb}{f{{l{c}}}{}}{b{{n{d}}}}{c{{A`{e}}}{}{}}000{cAb{}}0","c":[],"p":[[5,"Sieve",0],[1,"i32"],[5,"PrimeIter",0],[1,"bool"],[1,"usize"],[6,"Option",23],[5,"Vec",24],[6,"Result",25],[5,"TypeId",26]],"b":[]}],\
["rlib_tensor",{"doc":"","t":"FNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Tensor","borrow","borrow_mut","clone","clone_into","dim","dims","eq","fmt","from","from_slice","from_vec","get_index","index","index_mut","into","into_iter","iter","iter_mut","new","read","to_owned","try_from","try_into","type_id","write"],"q":[[0,"rlib_tensor"],[26,"core::clone"],[27,"core::cmp"],[28,"core::fmt"],[29,"core::fmt"],[30,"core::slice::iter"],[31,"core::slice::iter"],[32,"rlib_io::reader"],[33,"core::any"],[34,"rlib_io::writer"],[35,"rlib_io::writer"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{ce{}{}}0{{{b{c}}}{{b{c}}}d}{{ce}f{}{}}{{{b{c}}h}h{}}{{{b{c}}}{{j{h}}}{}}{{{b{c}}{b{c}}}ln}{{{b{c}}A`}AbAd}{cc{}}{{{j{h}}{Af{c}}}{{b{c}}}d}{{{j{h}}{Ah{c}}}{{b{c}}}{}}{{{b{c}}{j{h}}}h{}}{{{b{c}}{j{h}}}e{}{}}0;{{{b{c}}}e{}{}}{{{b{c}}}{{Aj{c}}}{}}{{{b{c}}}{{Al{c}}}{}}{{{j{h}}c}{{b{c}}}d}{{{j{h}}An}{{b{c}}}B`}{ce{}{}}{c{{Bb{e}}}{}{}}0{cBd{}}{{{b{c}}Bf}fBh}","c":[],"p":[[5,"Tensor",0],[10,"Clone",26],[1,"unit"],[1,"usize"],[1,"array"],[1,"bool"],[10,"PartialEq",27],[5,"Formatter",28],[8,"Result",28],[10,"Debug",28],[1,"slice"],[5,"Vec",29],[5,"Iter",30],[5,"IterMut",30],[5,"Reader",31],[10,"Readable",31],[6,"Result",32],[5,"TypeId",33],[5,"Writer",34],[10,"Writable",34]],"b":[]}],\
["rlib_treap",{"doc":"","t":"FKKFFNNNNNNNNNNNNNNNNNNNNNNONONNNNNONNNNONONMNNNNNNNNNNNNNNNNN","n":["Treap","TreapItem","TreapItemSized","TreapNode","TreePrinter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect","collect_into","default","first","fmt","fmt","fmt","from","from","from","from_item","insert_at","into","into","into","is_empty","item","last","left","merge","merge","new","new","new","priority","push","push","push","remove_at","right","root","root","root_mut","size","size","split_at","split_at","split_by","split_by","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update"],"q":[[0,"rlib_treap"],[62,"alloc::vec"],[63,"core::default"],[64,"core::option"],[65,"core::fmt"],[66,"core::fmt"],[67,"core::ops::function"],[68,"core::result"],[69,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,8,4,1,8,4,1,1,4,1,1,8,4,1,8,4,1,1,1,8,4,1,1,4,1,4,4,1,8,4,1,4,3,3,4,1,4,1,1,1,13,1,4,1,4,1,8,4,1,8,4,1,8,4,1,3,3,4],"f":"`````{ce{}{}}00000{{{b{c}}}{{d{c}}}f}{{{h{c}}{d{c}}}jf}{{}{{b{c}}}l}{{{b{c}}}{{n{c}}}f}{{{A`{c}}Ab}Ad{fAf}}{{{h{c}}Ab}Ad{fAf}}{{{b{c}}Ab}Ad{fAf}}{cc{}}00{c{{b{c}}}f}{{{b{c}}Ahc}j{fAj}}:::{{{b{c}}}Alf}`7`{{{n{{An{{h{c}}}}}}{n{{An{{h{c}}}}}}}{{n{{An{{h{c}}}}}}}f}{{{b{c}}{b{c}}}{{b{c}}}f}{{{b{c}}}{{A`{c}}}{fAf}}{c{{h{c}}}{}}{{}{{b{c}}}f}`{{f{n{f}}{n{f}}}j}0{{{h{c}}}jf}{{{b{c}}Ah}c{fAj}}`?`?{AjAh}{{{b{c}}}Ah{fAj}}{{{n{{An{{h{c}}}}}}Ah}{{B`{{n{{An{{h{c}}}}}}{n{{An{{h{c}}}}}}}}}{fAj}}{{{b{c}}Ah}{{B`{{b{c}}{b{c}}}}}{fAj}}{{{n{{An{{h{c}}}}}}e}{{B`{{n{{An{{h{c}}}}}}{n{{An{{h{c}}}}}}}}}f{{Bd{c}{{Bb{Al}}}}}}{{{b{c}}e}{{B`{{b{c}}{b{c}}}}}f{{Bd{c}{{Bb{Al}}}}}}{c{{Bf{e}}}{}{}}00000{cBh{}}00::9","c":[],"p":[[5,"Treap",0],[5,"Vec",62],[10,"TreapItem",0],[5,"TreapNode",0],[1,"unit"],[10,"Default",63],[6,"Option",64],[5,"TreePrinter",0],[5,"Formatter",65],[8,"Result",65],[10,"Debug",65],[1,"usize"],[10,"TreapItemSized",0],[1,"bool"],[5,"Box",66],[1,"tuple"],[17,"Output"],[10,"FnMut",67],[6,"Result",68],[5,"TypeId",69]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
