var searchIndex = JSON.parse('{\
"rlib_bitset":{"doc":"","t":"CAADLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bitset","bits_iter","bitset","BitsIter","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","Bitset","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clear","clone","clone_into","count","default","eq","flip","fmt","fmt","from","from_u64","into","iter_bits","new","not","remove","set","test","to_owned","to_string","try_from","try_into","type_id"],"q":["rlib_bitset","","","rlib_bitset::bits_iter","","","","","","","","","","","rlib_bitset::bitset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],1],[1,2],[[],3],[[],3],[[],4],0,[[5,5]],[[5,5]],[[5,5]],[[5,5]],[[5,5]],[[5,5]],[[]],[[]],[5],[5,5],[[]],[5,6],[[],5],[[5,5],7],[[5,6]],[[5,8],9],[[5,8],9],[[]],[10,5],[[]],[5,1],[[],5],[5],[[5,6]],[[5,6]],[[5,6],7],[[]],[[],11],[[],3],[[],3],[[],4]],"p":[[3,"BitsIter"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Bitset"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"String"]]},\
"rlib_dsu":{"doc":"","t":"DLLLLLLLLLLLLLLLLL","n":["DSU","borrow","borrow_mut","check","clone","clone_into","fmt","from","into","new","par","reset","size","to_owned","try_from","try_into","type_id","un"],"q":["rlib_dsu","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2,2],3],[1,1],[[]],[[1,4],5],[[]],[[]],[2,1],[[1,2],2],[[1,2]],[[1,2],2],[[]],[[],6],[[],6],[[],7],[[1,2,2],3]],"p":[[3,"DSU"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"rlib_f80":{"doc":"","t":"SSLLLLLLLLLLLDFLLLLLLLLLLLLLLLLLLLLLL","n":["ONE","ZERO","abs","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","f80","f80_init","fmt","fmt","from","from","ge","gt","into","le","lt","max","min","mul","mul_assign","neg","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id"],"q":["rlib_f80","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[1,1],[[1,1]],[[1,1]],[[]],[[]],[1,1],[[]],[[],1],[[1,1]],[[1,1]],[[1,1],2],0,[[]],[[1,3],4],[[1,3],4],[[]],[5,1],[[1,1],2],[[1,1],2],[[]],[[1,1],2],[[1,1],2],[[1,1],1],[[1,1],1],[[1,1]],[[1,1]],[1],[[1,1],[[7,[6]]]],[[1,1]],[[1,1]],[[]],[[],8],[[],9],[[],9],[[],10]],"p":[[3,"f80"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f64"],[4,"Ordering"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"rlib_gcd":{"doc":"","t":"FFFF","n":["crt","egcd","gcd","lcm"],"q":["rlib_gcd","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[[0,[1,2]],[0,[1,2]],[0,[1,2]],[0,[1,2]]],[[0,[1,2]]]],[[1,1,1]],[[1,1],1],[[1,1],1]],"p":[[8,"Integer"],[8,"Neg"]]},\
"rlib_integer":{"doc":"","t":"SISSSQSQSKK","n":["BASE_10_LEN","Integer","MAX","MIN","ONE","Signed","TWO","Unsigned","ZERO","abs","unsigned_abs"],"q":["rlib_integer","","","","","","","","","",""],"d":["","","","","","","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]]],"p":[[8,"Integer"]]},\
"rlib_io":{"doc":"","t":"CCCCOOOOAAAOIDLLLLLLKLLLLLLLIDLLLLLLLLLLKLL","n":["Readable","Reader","Writable","Writer","make_io","make_output_macro","make_output_macro_","out_impl","output_macro","reader","writer","make_output_macro","Readable","Reader","borrow","borrow_mut","from","into","is_eof","new","read","read","read_line","read_lines","read_vec","try_from","try_into","type_id","Writable","Writer","borrow","borrow_mut","drop","flush","from","into","new","try_from","try_into","type_id","write","write","write_char"],"q":["rlib_io","","","","","","","","","","","rlib_io::output_macro","rlib_io::reader","","","","","","","","","","","","","","","","rlib_io::writer","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,0,0,12,12,12,12,12,12,12,12,12,12,15,12,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,2],[[[4,[3]]],1],[1],[1,5],[1,[[7,[6]]]],[1,[[8,[6]]]],[[1,9],[[8,[5]]]],[[],10],[[],10],[[],11],0,0,[[]],[[]],[12],[12],[[]],[[]],[[[4,[13]]],12],[[],10],[[],10],[[],11],[12],[12],[[12,14]]],"p":[[3,"Reader"],[15,"bool"],[8,"Read"],[3,"Box"],[8,"Readable"],[3,"String"],[4,"Option"],[3,"Vec"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"Writer"],[8,"Write"],[15,"char"],[8,"Writable"]]},\
"rlib_iter":{"doc":"","t":"FFF","n":["iter_neighbours","iter_submasks","iter_supermasks"],"q":["rlib_iter","",""],"d":["","",""],"i":[0,0,0],"f":[[[1,1,1,1],2],[[],2],[[],2]],"p":[[15,"usize"],[8,"Iterator"]]},\
"rlib_mint":{"doc":"","t":"GGDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Mint107","Mint998","Modular","ONE","ZERO","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","fmt","from","inner","into","inv","md","mul","mul_assign","neg","new","pow","read","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","write"],"q":["rlib_mint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[[1,1],1],[[1,1]],[[]],[[]],[1,1],[[]],[[1,1],1],[[1,1]],[[1,1],2],[[1,3],4],[[1,3],4],[[]],[1,5],[[]],[1,1],[[],5],[[1,1],1],[[1,1]],[1,1],[6,1],[[1,7],1],[8,1],[[1,1],1],[[1,1]],[[]],[[],9],[[],10],[[],10],[[],11],[[1,12]]],"p":[[3,"Modular"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[15,"i64"],[15,"u64"],[3,"Reader"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Writer"]]},\
"rlib_rand":{"doc":"","t":"GAADLLLLLLLLLLLLLLIK","n":["Rng","lcg","randomable","LinearCongruentialGenerator64","borrow","borrow_mut","clone","clone_into","from","from_seed","from_time","into","next","next_raw","to_owned","try_from","try_into","type_id","Randomable","gen_from_u64"],"q":["rlib_rand","","","rlib_rand::lcg","","","","","","","","","","","","","","","rlib_rand::randomable",""],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,5],"f":[0,0,0,0,[[]],[[]],[1,1],[[]],[[]],[2,1],[[],1],[[]],[1],[1,2],[[]],[[],3],[[],3],[[],4],0,[2]],"p":[[3,"LinearCongruentialGenerator64"],[15,"u64"],[4,"Result"],[3,"TypeId"],[8,"Randomable"]]},\
"rlib_rational":{"doc":"","t":"SDISMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ONE","Rational","SignedInteger","ZERO","a","add","add_assign","b","borrow","borrow_mut","ceil","clone","clone_into","cmp","div","div_assign","eq","floor","fmt","fmt","from","hash","into","mul","mul_assign","new","new_int","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id"],"q":["rlib_rational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,0,0,0,0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[1]],[2,[1]]],4],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[5]],2],6],[[[2,[1]]],[[2,[1]]]],[[[2,[[0,[1,7]]]],8],9],[[[2,[[0,[1,10]]]],8],9],[[]],[[[2,[11]]]],[[]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[1,1],[[2,[1]]]],[1,[[2,[1]]]],[[[2,[1]],[2,[1]]],[[12,[4]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[]],[[],13],[[],14],[[],14],[[],15]],"p":[[8,"SignedInteger"],[3,"Rational"],[8,"Clone"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"Hash"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"rlib_segtree":{"doc":"","t":"CCCAADIILLLLLLLKKLLLKLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMM","n":["Segtree","SegtreeItem","SegtreeItemLazy","segtree","segtree_items","Segtree","SegtreeItem","SegtreeItemLazy","ask","borrow","borrow_mut","from","from_iter","from_slice","into","merge","modify","modify","new","new_raw","push","set","try_from","try_into","type_id","update","Max","Min","Sum","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","fmt","fmt","fmt","from","from","from","into","into","into","merge","merge","merge","modify","modify","modify","new","new","new","push","push","push","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v","v","v"],"q":["rlib_segtree","","","","","rlib_segtree::segtree","","","","","","","","","","","","","","","","","","","","","rlib_segtree::segtree_items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,16,2,3,3,3,2,3,3,3,3,16,0,0,0,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10],"f":[0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]],4,4],[[0,[1,2]]]],[[]],[[]],[[]],[[],[[3,[[0,[1,2]]]]]],[[],[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]],4,4]],[[4,[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[4,[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]],4,[0,[1,2]]]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[1,7,1]]]]],[[8,[[0,[1,7,1]]]]]],[[[9,[[0,[1,7,1]]]]],[[9,[[0,[1,7,1]]]]]],[[[10,[[0,[1,1]]]]],[[10,[[0,[1,1]]]]]],[[]],[[]],[[]],[[],[[8,[[0,[7,1,11]]]]]],[[],[[9,[[0,[7,1,11]]]]]],[[],[[10,[[0,[7,1,11]]]]]],[[[8,[[0,[12,7,1]]]],13],14],[[[9,[[0,[12,7,1]]]],13],14],[[[10,[[0,[12,1]]]],13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[7,1]]]],[8,[[0,[7,1]]]]],[[8,[[0,[7,1]]]]]],[[[9,[[0,[7,1]]]],[9,[[0,[7,1]]]]],[[9,[[0,[7,1]]]]]],[[[10,[[0,[15,1]]]],[10,[[0,[15,1]]]]],[[10,[[0,[15,1]]]]]],[[]],[[]],[[]],[[[0,[7,1]]],[[8,[[0,[7,1]]]]]],[[[0,[7,1]]],[[9,[[0,[7,1]]]]]],[[[0,[7,1]]],[[10,[[0,[7,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,0,0],"p":[[8,"Clone"],[8,"SegtreeItemLazy"],[3,"Segtree"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"PartialOrd"],[3,"Min"],[3,"Max"],[3,"Sum"],[8,"Integer"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Add"],[8,"SegtreeItem"]]},\
"rlib_sieve":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLL","n":["PrimeIter","Sieve","borrow","borrow","borrow_mut","borrow_mut","factorize","from","from","into","into","into_iter","is_prime","min_prime","new","next","primes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rlib_sieve","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,3,1,3,1,1,3,1,3,1,3,1,1,1,3,1,3,1,3,1,3,1],"f":[0,0,[[]],[[]],[[]],[[]],[[1,2],3],[[]],[[]],[[]],[[]],[[]],[[1,2],4],[[1,2],2],[5,1],[3,6],[1,7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[3,"Sieve"],[15,"i32"],[3,"PrimeIter"],[15,"bool"],[15,"usize"],[4,"Option"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"rlib_tensor":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Tensor","borrow","borrow_mut","clone","clone_into","dim","dims","eq","fmt","from","from_slice","from_vec","get_index","index","index_mut","into","into_iter","iter","iter_mut","new","read","to_owned","try_from","try_into","type_id","write"],"q":["rlib_tensor","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[2,3],3],[2],[[[2,[4]],[2,[4]]],5],[[[2,[6]],7],8],[[]],[[],[[2,[1]]]],[9,2],[2,3],[2],[2],[[]],[2],[2,10],[2,11],[1,[[2,[1]]]],[12,[[2,[13]]]],[[]],[[],14],[[],14],[[],15],[[[2,[16]],17]]],"p":[[8,"Clone"],[3,"Tensor"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"Iter"],[3,"IterMut"],[3,"Reader"],[8,"Readable"],[4,"Result"],[3,"TypeId"],[8,"Writable"],[3,"Writer"]]},\
"rlib_treap":{"doc":"","t":"DIIDDLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLMLLLLMLMLKLLLLLLLLLLLLLLLLL","n":["Treap","TreapItem","TreapItemSized","TreapNode","TreePrinter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect","collect_into","default","first","fmt","fmt","fmt","from","from","from","from_item","insert_at","into","into","into","is_empty","item","last","left","merge","merge","new","new","new","priority","push","push","push","remove_at","right","root","root","root_mut","size","size","split_at","split_at","split_by","split_by","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update"],"q":["rlib_treap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,3,1,6,3,1,1,3,1,1,6,3,1,6,3,1,1,1,6,3,1,1,3,1,3,3,1,6,3,1,3,14,14,3,1,3,1,1,1,15,1,3,1,3,1,6,3,1,6,3,1,6,3,1,14,14,3],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[3,2]],[[],[[1,[4]]]],[1,5],[[6,7],8],[[3,7],8],[[1,7],8],[[]],[[]],[[]],[[],1],[[1,9]],[[]],[[]],[[]],[1,10],0,[1,5],0,[[[5,[[11,[3]]]],[5,[[11,[3]]]]],[[5,[[11,[3]]]]]],[[1,1],1],[1,6],[[],3],[[],1],0,[[5,5]],[[5,5]],[3],[[1,9]],0,[1,5],0,[1,5],[[],9],[1,9],[[[5,[[11,[3]]]],9]],[[1,9]],[[[5,[[11,[3]]]]]],[1],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[5,5]],[[5,5]],[3]],"p":[[3,"Treap"],[3,"Vec"],[3,"TreapNode"],[8,"Default"],[4,"Option"],[3,"TreePrinter"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"bool"],[3,"Box"],[4,"Result"],[3,"TypeId"],[8,"TreapItem"],[8,"TreapItemSized"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
